#ifndef __6D_VALUES_H
#define __6D_VALUES_H
/*
6D programming language
Copyright (C) 2011  Danny Milosavljevic
This program is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
You should have received a copy of the GNU Lesser General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#include <stdio.h>
#include <stdlib.h>
#define INLINE __inline
#define NODET NodeT
#define MNODET NodeT
//struct Node*
#define NATIVEUINT NativeUInt
#define NATIVEFLOAT NativeFloat
#define NATIVEINT NativeInt
#ifndef __cplusplus
typedef int bool;
#define true 1
#define false 0
#define BEGIN_NAMESPACE_6D(name) 
#define END_NAMESPACE_6D(name) 
#else
#define BEGIN_NAMESPACE_6D(name) extern "C" {
#define END_NAMESPACE_6D(name) }
#endif
#define USE_NAMESPACE_6D(name)
#define BEGIN_STRUCT_6D(name) struct name { \
	struct Node super;
#define END_STRUCT_6D(name) };
#ifdef __GNUC__
#define G_5D_PURE __attribute__ ((pure))
#define LIKELY_6D(x) __builtin_expect(!!(x), 1)
#define UNLIKELY_6D(x) __builtin_expect(!!(x), 0)
#else
#define G_5D_PURE
#define LIKELY_6D(x) x
#define UNLIKELY_6D(x) x
#endif
BEGIN_NAMESPACE_6D(Values)

/* this is used as the "result" of the parser (one of it is the result) */
typedef const struct Node* NodeT;
/* given a string, returns a node that can be quickly checked for identicalness */
NodeT symbolFromStr(const char* name) G_5D_PURE;

/* given two nodes, constructs a "Cons" with a head and tail and return it */
NodeT cons(NodeT head, NodeT tail) G_5D_PURE;

/* boxes an unknown value so we don't get scared by it */
NodeT box(void*) G_5D_PURE;

/* given a string, somehow puts it into something resembling a NodeT */
NodeT strC(const char* value) G_5D_PURE;

/* given a Str, returns its size */
size_t strSize(NodeT n) G_5D_PURE;

/* given a string, returns a node that can be quickly checked for identicalness (and is not a symbol). */
NodeT keywordFromStr(const char* name) G_5D_PURE;

/* given a formal parameter and a body, returns a node that represents a function with that formal parameter and body */
NodeT fn(NodeT formalParameter, NodeT body) G_5D_PURE;

/* given a callable and argument, returns a node that represents a Call */
NodeT call(NodeT callable, NodeT argument) G_5D_PURE;

/* shorthand for call(call */
static INLINE NodeT call2(NodeT callable, NodeT argument, NodeT argument2) {
	return call(call(callable, argument), argument2);
}

/* given a symbol, returns its text. If not a symbol, returns NULL */
const char* symbolName(NodeT node) G_5D_PURE;

/* given a keyword, returns its text. If not a keyword, returns NULL */
const char* keywordName(NodeT node) G_5D_PURE;

/* given a Cons, returns its head */
NodeT consHead(NodeT) G_5D_PURE;

/* given a Cons, returns its tail. Tail is USUALLY nil or a(nother) Cons */
NodeT consTail(NodeT) G_5D_PURE;

/* given a Call, returns its callable. */
NodeT callCallable(NodeT) G_5D_PURE;

/* given a Call, returns its argument. */
NodeT callArgument(NodeT) G_5D_PURE;

/* given a Fn, returns its formal parameter. */
NodeT fnParameter(NodeT) G_5D_PURE;

/* given a Fn, returns its body. */
NodeT fnBody(NodeT) G_5D_PURE;

/* finds out whether node is a Symbol */
bool symbolP(NodeT node) G_5D_PURE;

/* finds out whether node is a Keyword */
bool keywordP(NodeT node) G_5D_PURE;

bool fnP(NodeT) G_5D_PURE;
bool callP(NodeT) G_5D_PURE;
bool consP(NodeT) G_5D_PURE;
bool nilP(NodeT) G_5D_PURE;
bool boxP(NodeT) G_5D_PURE;
bool strP(NodeT) G_5D_PURE; /* not necessarily disjunct from int */
bool intP(NodeT) G_5D_PURE;
bool integerP(NodeT) G_5D_PURE;
bool floatP(NodeT) G_5D_PURE;
void* boxValue(NodeT node) G_5D_PURE;
char* strValue(NodeT node) G_5D_PURE;
NodeT operation(NodeT callable, NodeT argument1, NodeT argument2) G_5D_PURE;
NodeT operationArgument1(NodeT o) G_5D_PURE;
NodeT operationArgument2(NodeT o) G_5D_PURE;
NodeT operationOperator(NodeT o) G_5D_PURE;
bool binaryOperationP(NodeT o) G_5D_PURE;
/*extern NodeT nil;*/
#define nil NULL

void str(NodeT, FILE*);

NodeT pair(NodeT a, NodeT b) G_5D_PURE;
NodeT pairFst(NodeT p) G_5D_PURE;
NodeT pairSnd(NodeT p) G_5D_PURE;
bool pairP(NodeT p) G_5D_PURE;

static INLINE NodeT closeOver(NodeT /* symbol */ parameter, NodeT argument, NodeT body) {
	return call(fn(parameter, body), argument);
}
int symbolreferenceIndex(NodeT n) G_5D_PURE;
NodeT symbolreference(int index) G_5D_PURE;

typedef NodeT (*FFIFnCallbackT)(NodeT, NodeT data);
NodeT FFIFn(FFIFnCallbackT callback, NodeT aData, const char* name) G_5D_PURE;
NodeT FFIFnNoGC(FFIFnCallbackT callback, NodeT aData, const char* name) G_5D_PURE;
bool FFIFnP(NodeT node) G_5D_PURE;
NodeT execFFIFn(NodeT node, NodeT argument) /*impure*/;
bool FFIFnWithCallbackP(NodeT n, FFIFnCallbackT callback) G_5D_PURE; /* used "internally" only */

bool ratioP(NodeT n) G_5D_PURE;
NodeT ratioA(NodeT n) G_5D_PURE;
NodeT ratioB(NodeT n) G_5D_PURE;

/* errors */

NodeT parsingError(NodeT aExpectedInput, NodeT aGotInput) G_5D_PURE;
NodeT evaluationError(NodeT aExpectedInput, NodeT aGotInput, NodeT aContext) G_5D_PURE;
bool errorP(NodeT n) G_5D_PURE;
NodeT errorKind(NodeT node) G_5D_PURE;
NodeT errorExpectedInput(NodeT node) G_5D_PURE;
NodeT errorGotInput(NodeT node) G_5D_PURE;
NodeT errorContext(NodeT node) G_5D_PURE;

void initIntegers(void);
void initFloats(void);
NodeT call5(NodeT a, NodeT b, NodeT c, NodeT d, NodeT e) G_5D_PURE;
END_NAMESPACE_6D(Values)
BEGIN_NAMESPACE_6D(Strings)
NodeT concat(NodeT a, NodeT b);
END_NAMESPACE_6D(Strings)
#endif /* ndef __6D_VALUES_H */
