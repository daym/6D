#ifndef __6D_OPERATIONS_H
#define __6D_OPERATIONS_H
#include <stdlib.h>
#include "6D/Values"
#define DECLARE_ENV_SPECIAL_FORM(name) Values::NodeT name##_exec(Values::NodeT uargument, Values::NodeT env);
#define DECLARE_FFI_FN(name) extern Values::NodeT name; Values::NodeT name##_exec(Values::NodeT uargument, Values::NodeT env);
#define DECLARE_SPECIAL_FORM(name) DECLARE_FFI_FN(name) DECLARE_ENV_SPECIAL_FORM(name)
#define DEFINE_FFI_FN(name) Values::NodeT name = Values::FFIFnNoGC(name##_exec, nil, ""#name);
#define CLOSED_FFI_FN(name, argument) Values::FFIFn(name##_exec, argument, ""#name)
#ifdef STRICT_EVAL
/* if the evaluator is already strict then we don't need to evaluate it ourselves again. */
#define PREPARE(argument) argument
#else
#define PREPARE(argument) Evaluators::eval(nil, argument)
#endif
#define DEFINE_STRICT_FN(name, body) \
	Values::NodeT name##_exec(Values::NodeT uargument, Values::NodeT env) { \
		using namespace Values; \
		Values::NodeT argument = PREPARE(uargument); \
		return internNative(body); \
	} \
	DEFINE_FFI_FN(name)
#define DEFINE_SPECIAL_FORM(name, body) \
	Values::NodeT name##_exec(Values::NodeT argument, Values::NodeT env) { \
		return body; \
	} \
	DEFINE_FFI_FN(name)
#define REGISTER_STR(name, body) void name::str(FILE* destination) const { \
	const name* node = this; \
	body \
}
#define REGISTER_BUILTIN(name, aCount, reservedCount, sym)
#define FFI_FN_EQUAL_P(node, name) (Values::boxP(node) && Values::FFIFnWithCallbackP((node), name##_exec))
#define SPECIAL_FORM_EQUAL_P(node, name) FFI_FN_EQUAL_P(node, name)
#endif /* __6D_OPERATIONS_H */
