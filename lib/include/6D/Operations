#ifndef __6D_OPERATIONS_H
#define __6D_OPERATIONS_H
#include <stdlib.h>
#include "6D/Values"
#define DECLARE_ENV_SPECIAL_FORM(name) NODET name##_exec(NODET uargument, NODET env);
#define DECLARE_FFI_FN(name) extern NODET name; NODET name##_exec(NODET uargument, NODET env);
#define DECLARE_SPECIAL_FORM(name) DECLARE_FFI_FN(name) DECLARE_ENV_SPECIAL_FORM(name)
#define DEFINE_FFI_FN(name) NODET name = nil;
#define INIT_FFI_FN(name) name = FFIFnNoGC(name##_exec, nil, ""#name);
#define CLOSED_FFI_FN(name, argument) FFIFn(name##_exec, argument, ""#name)
#define CLOSED_FFI_FN_NO_GC(name, argument) FFIFnNoGC(name##_exec, argument, ""#name)
#ifdef STRICT_EVAL
/* if the evaluator is already strict then we don't need to evaluate it ourselves again. */
#define PREPARE(argument) argument
#else
#define PREPARE(argument) Evaluators::eval(nil, argument)
#endif
#define DEFINE_STRICT_FN(name, body) \
	NODET name##_exec(NODET uargument, NODET env) { \
		USE_NAMESPACE_6D(Values) \
		NODET argument = PREPARE(uargument); \
		return body; \
	} \
	DEFINE_FFI_FN(name)
#define DEFINE_SPECIAL_FORM(name, body) \
	NODET name##_exec(NODET argument, NODET env) { \
		return body; \
	} \
	DEFINE_FFI_FN(name)
#define REGISTER_STRxx(name, body) void name::str(FILE* destination) const { \
	const name* node = this; \
	body \
}
#define REGISTER_STR(name, body) /* FIXME */
#define REGISTER_BUILTIN(name, aCount, reservedCount, sym)
#define FFI_FN_EQUAL_P(node, name) (FFIFnP(node) && FFIFnWithCallbackP((node), name##_exec))
#define SPECIAL_FORM_EQUAL_P(node, name) FFI_FN_EQUAL_P(node, name)
#define DEFINE_STRICT_MONADIC_FN(name, body) \
	DEFINE_STRICT_FN(name, body)
#define DEFINE_STRICT_BINARY_FN(name, body) \
	DEFINE_STRICT_FN(name##2, body) \
	DEFINE_STRICT_FN(name, CLOSED_FFI_FN(name##2, argument))
#define INIT_BINARY_FN(name) \
	INIT_FFI_FN(name) \
	INIT_FFI_FN(name##2)
#endif /* __6D_OPERATIONS_H */
