#ifndef __6D_ALLOCATORS_H
#define __6D_ALLOCATORS_H
#include <string.h>
#include <stdlib.h>
#include "6D/Values"
#define REUSE_6D(x) x
#ifndef WIN32
#include <sys/types.h>
#endif
#ifdef GC_THREADS
#include <gc/gc.h>
#else
#define GC_MALLOC_ATOMIC GC_malloc_atomic
#define GC_MALLOC GC_malloc
#define GC_MALLOC_UNCOLLECTABLE GC_malloc_uncollectable
BEGIN_NAMESPACE_6D(Allocators)
void* GC_malloc_atomic(size_t sz); /* user-provided */
void* GC_malloc(size_t sz); /* user-provided */
void* GC_malloc_uncollectable(size_t sz); /* user-provided */
END_NAMESPACE_6D(Allocators)
#endif
BEGIN_NAMESPACE_6D(Allocators)
void initAllocators(void);
static INLINE char* GCx_strdup(const char* value) {
#ifdef GC_STRDUP
	return(GC_STRDUP(value));
#else
	char* result;
	result = (char*) GC_MALLOC_ATOMIC(strlen(value) + 1);
	memcpy(result, value, strlen(value) + 1);
	return(result);
#endif
}
static INLINE char* GCx_strdupNoGC(const char* value) {  
	char* result;
	result = (char*) malloc(strlen(value) + 1);
	memcpy(result, value, strlen(value) + 1);
	return(result);
}
/* Executable Memory */
void* ealloc(size_t size, void* source);
void efree(void* beginning);

#ifdef GC_THREADS
#define ALLOCATOR_STACK , std::deque<NodeT, gc_allocator<NODET> > 
#define ALLOCATOR_VECTOR , gc_allocator<NODET>
#define ALLOCATOR_VECTOR2(t) , gc_allocator<t>
#define GC_BASECLASS
#else
#define ALLOCATOR_STACK
#define ALLOCATOR_VECTOR
#define ALLOCATOR_VECTOR2(t) 
#define GC_BASECLASS 
#endif
#define NEW(x) (struct x*) Node_initTag((struct Node*) GC_MALLOC(sizeof(struct x)), TAG_##x)
#define NEW_NOGC(x) (struct x*) Node_initTag((struct Node*) GC_MALLOC_UNCOLLECTABLE(sizeof(struct x)), TAG_##x)
END_NAMESPACE_6D(Allocators)
#endif /* ndef __6D_ALLOCATORS_H */
