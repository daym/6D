#ifndef __5D_FFI
#define __5D_FFI
#include <sys/types.h>
#include "6D/Values"

BEGIN_NAMESPACE_6D(FFIs)
/* conversions */
static INLINE NODET internNativeNode(NODET value) {
	return value;
}
NODET internNativeBool(bool value) G_5D_PURE;

NODET internNativeLL(long long value);
NODET internNativeULL(unsigned long long value);
NODET internNativeSize_t(size_t value);

#if defined(__VFP_FP__) || defined(__ARM_EABI__)
/* ARM doesn't have extended-precision floating point */
typedef double NativeFloat;
//#define NATIVEFLOAT_PRECISION 15
#else
typedef long double NativeFloat;
//#define NATIVEFLOAT_PRECISION 19
#endif
#ifdef WIN32
typedef unsigned int uint32_t; /* why me... */
#endif

#if __SIZEOF_LONG_LONG__ != __SIZEOF_LONG__
typedef unsigned long long int NativeUInt; /* register type */
typedef long long int NativeInt; /* register type */
#else
typedef unsigned long int NativeUInt; /* register type */
typedef long int NativeInt; /* register type */
#endif

NODET internNativeInt(NativeInt value);
/*NODET internNativeU(NativeUInt value);*/
NODET internNativeFloat(NativeFloat value);

bool intFromNode(NODET root, int* result);
int nearestIntFromNode(NODET root);
bool longFromNode(NODET root, long* result);
bool longLongFromNode(NODET root, long long* result);
bool shortFromNode(NODET root, short* result);
bool pointerFromNode(NODET root, void** result);
bool booleanFromNode(NODET root, bool* result); /* evaluates! */
bool stringFromNode(NODET root, char** result);
bool stringOrNilFromNode(NODET root, char** resullt);
bool stringSizeFromNode(NODET root, size_t* result);
bool floatFromNode(NODET root, float* result);
bool longDoubleFromNode(NODET root, long double* result);
bool doubleFromNode(NODET root, double* result);
bool sizedIntFromNode(int bitCount, NODET root, long long* result);
/* this will eventually be used to force the entire lazy cons (one level) to be evaluated. Use with care (infinite lists aren't gonna like that). */
static INLINE bool consFromNode(NODET root, NODET* result) {
	*result = root;
	return true;
}
static INLINE bool pairFromNode(NODET root, NODET* result) {
	*result = root;
	return true;
}
static INLINE bool nodeFromNode(NODET root, NODET* result) {
	*result = root;
	return true;
}

bool toNativeFloat(NODET node, NATIVEFLOAT* result) G_5D_PURE;
bool toNativeInt(NODET node, NATIVEINT* result) G_5D_PURE;
static INLINE NodeT marshalStr(NodeT (*cb)(const char* s), NodeT argument) {
	char* value;
	if(!stringFromNode(argument, &value))
		return evalError(strC("<str>"), strC("<junk>"), argument);
	else
		return (*cb)(value);
}
static INLINE NodeT marshalInt(NodeT (*cb)(int s), NodeT argument) {
	int value;
	if(!intFromNode(argument, &value))
		return evalError(strC("<int>"), strC("<junk>"), argument);
	else
		return (*cb)(value);
}

END_NAMESPACE_6D(FFIs)
#endif
