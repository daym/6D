#ifndef __6D_VALUES_H
#define __6D_VALUES_H
#include <string>
#include <stdio.h>
#include <stdlib.h>
#include <map>
#ifdef __GNUC__
#define G_5D_PURE __attribute__ ((pure))
#else
#define G_5D_PURE
#endif
namespace Values {

/* this is used as the "result" of the parser (one of it is the result) */
typedef const struct Node* NodeT;
/* given a string, returns a node that can be quickly checked for identicalness */
NodeT symbolFromStr(const char* name) G_5D_PURE;

/* given two nodes, constructs a "Cons" with a head and tail and return it */
NodeT cons(NodeT head, NodeT tail) G_5D_PURE;

/* given a std::string, somehow puts it into something resembling a NodeT */
NodeT strCXX(const std::string& value) G_5D_PURE;

/* given a string, returns a node that can be quickly checked for identicalness (and is not a symbol). */
NodeT keywordFromStr(const char* name) G_5D_PURE;

/* given a formal parameter and a body, returns a node that represents a function with that formal parameter and body */
NodeT fn(NodeT formalParameter, NodeT body) G_5D_PURE;

/* given a callable and argument, returns a node that represents a Call */
NodeT call(NodeT callable, NodeT argument) G_5D_PURE;

/* given a symbol, returns its text. If not a symbol, returns NULL */
const char* getSymbol1Name(NodeT node) G_5D_PURE;

/* given a keyword, returns its text. If not a keyword, returns NULL */
const char* getKeyword1Name(NodeT node) G_5D_PURE;

/* given a Cons, returns its head */
NodeT getConsHead(NodeT) G_5D_PURE;

/* given a Cons, returns its tail. Tail is USUALLY nil or a(nother) Cons */
NodeT getConsTail(NodeT) G_5D_PURE;

/* given a Call, returns its callable. */
NodeT getCallCallable(NodeT) G_5D_PURE;

/* given a Call, returns its argument. */
NodeT getCallArgument(NodeT) G_5D_PURE;

/* given a Fn, returns its formal parameter. */
NodeT getFnParameter(NodeT) G_5D_PURE;

/* given a Fn, returns its body. */
NodeT getFnBody(NodeT) G_5D_PURE;

/* finds out whether node is a Symbol */
bool symbolP(NodeT node) G_5D_PURE;

/* finds out whether node is a Keyword */
bool keywordP(NodeT node) G_5D_PURE;

bool fnP(NodeT) G_5D_PURE;
bool callP(NodeT) G_5D_PURE;
bool consP(NodeT) G_5D_PURE;
bool nilP(NodeT) G_5D_PURE;
NodeT operation(NodeT callable, NodeT argument1, NodeT argument2) G_5D_PURE;
NodeT getOperationArgument1(NodeT o) G_5D_PURE;
NodeT getOperationArgument2(NodeT o) G_5D_PURE;
NodeT getOperationOperator(NodeT o) G_5D_PURE;
bool operationP(NodeT o) G_5D_PURE;
/*extern NodeT nil;*/
#define nil NULL

void str(NodeT, FILE*);

NodeT pair(NodeT a, NodeT b) G_5D_PURE;
static inline Values::NodeT close(Values::NodeT /* symbol */ parameter, Values::NodeT argument, Values::NodeT body) {
	return call(fn(parameter, body), argument);
}
int getSymbolreferenceIndex(Values::NodeT n) G_5D_PURE;
Values::NodeT symbolreference(int index) G_5D_PURE;

typedef NodeT (*FFIFnCallbackT)(NodeT, void* data);
NodeT FFIFn(FFIFnCallbackT callback, void* aData, const char* name) G_5D_PURE;
bool FFIFnP(NodeT node) G_5D_PURE;
NodeT execFFIFn(NodeT node, NodeT argument) /*impure*/;

/* conversions */
NodeT internNative(NodeT value); /* neutral */
NodeT internNative(bool value);

}
#endif /* ndef __6D_VALUES_H */
