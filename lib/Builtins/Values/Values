#ifndef __VALUES_H
#define __VALUES_H
#include "6D/Values"
#include "Allocators/Allocators"

namespace Values {

/* it doesn't matter to me what exactly Node is, I'm just using struct here so it shuts up */

struct Node 
#ifdef GC_THREADS
 : public gc
#endif
{
	virtual ~Node(void);
	virtual void str(FILE* destination) const;
};

/* semi-private */
enum {
	TAG_SYMBOLREFERENCE,
	TAG_KEYWORD,
	TAG_SYMBOL,
	TAG_FFI_FN,
	TAG_OPAQUE,
};
int tagFromNode(NodeT node);
//typedef std::map<std::string, NodeT> Hashtable;

struct Call : Node {
	NodeT callable;
	NodeT argument;
	NodeT result;
	int resultGeneration;
	Call(NodeT aCallable, NodeT aArgument) :
		callable(aCallable),
		argument(aArgument)
	{
		this->callable = callable;
		this->argument = argument;
		this->result = NULL;
		this->resultGeneration = -1;
	}
	virtual ~Call() {
	}
};
static inline int indexOfSymbol(NodeT needle, int startingIndex, NodeT boundNames) {
	if(boundNames == nil)
		return(-1);
	else if(getConsHead(boundNames) == needle)
		return(startingIndex);
	else
		return(indexOfSymbol(needle, startingIndex + 1, getConsTail(boundNames)));
}

}
#endif /* ndef __VALUES_H */
